@startuml
'=== Strategy Pattern (Shipping Cost Calculation) ===
interface ShippingStrategy {
    +calculateCost(order: Order): double
}

class StandardShipping {
    +calculateCost(order: Order): double
}

class ExpressShipping {
    +calculateCost(order: Order): double
}

class FreeShipping {
    +calculateCost(order: Order): double
}

ShippingStrategy <|-- StandardShipping
ShippingStrategy <|-- ExpressShipping
ShippingStrategy <|-- FreeShipping

'=== State Pattern (Order Status) ===
interface OrderState {
    +processOrder(order: Order)
    +cancelOrder(order: Order)
    +shipOrder(order: Order)
    +deliverOrder(order: Order)
}

class NewOrderState {
    +processOrder(order: Order)
    +cancelOrder(order: Order)
    +shipOrder(order: Order)
    +deliverOrder(order: Order)
}

class ProcessingState {
    +processOrder(order: Order)
    +cancelOrder(order: Order)
    +shipOrder(order: Order)
    +deliverOrder(order: Order)
}

class ShippedState {
    +processOrder(order: Order)
    +cancelOrder(order: Order)
    +shipOrder(order: Order)
    +deliverOrder(order: Order)
}

class DeliveredState {
    +processOrder(order: Order)
    +cancelOrder(order: Order)
    +shipOrder(order: Order)
    +deliverOrder(order: Order)
}

class CancelledState {
    +processOrder(order: Order)
    +cancelOrder(order: Order)
    +shipOrder(order: Order)
    +deliverOrder(order: Order)
}

OrderState <|-- NewOrderState
OrderState <|-- ProcessingState
OrderState <|-- ShippedState
OrderState <|-- DeliveredState
OrderState <|-- CancelledState

'=== Decorator Pattern (Additional Services) ===
abstract class Order {
    +getDescription(): String
    +getCost(): double
}

class BasicOrder {
    -items: List<Item>
    +getDescription(): String
    +getCost(): double
}

abstract class OrderDecorator {
    -decoratedOrder: Order
    +OrderDecorator(order: Order)
    +getDescription(): String
    +getCost(): double
}

class GiftWrappingDecorator {
    +getDescription(): String
    +getCost(): double
}

class InsuranceDecorator {
    +getDescription(): String
    +getCost(): double
}

Order <|-- BasicOrder
Order <|-- OrderDecorator
OrderDecorator <|-- GiftWrappingDecorator
OrderDecorator <|-- InsuranceDecorator

'=== Template Method Pattern (Order Processing) ===
abstract class ProcessingOrder {
    +final processOrder(order: Order)
    #verifyCustomer(customer: Customer)
    #verifyInventory(order: Order)
    #calculateTotal(order: Order)
    #applyDiscounts(order: Order)
    #generateInvoice(order: Order)
    #notifyCustomer(order: Order)
}

class OnlineProcessingOrder {
    #verifyCustomer(customer: Customer)
    #verifyInventory(order: Order)
    #calculateTotal(order: Order)
    #applyDiscounts(order: Order)
    #generateInvoice(order: Order)
    #notifyCustomer(order: Order)
}
'=== Customer Class ===
class Customer{
    -cusId: String
    -cusName: String
    -cusPhone: String
    -password: String
    -cusEmail: String
    -cusAdress: String

    +Customer()
    +getCusId()
    +getName()
    +getEmail()
    +getPhone()
    +getAdress()
    +getPassword()
}
ProcessingOrder o-- OnlineProcessingOrder
Customer <|-- ProcessingOrder
'=== Item class ===
class Items{
    -itemId: String
    -itemName: String
    -quantity: int
    -price: double

    +Items()
    +getItemName(): void
    +getItemId(): void
    +getQuantity(): int
    +getPrice(): double
}

'=== Main Order Class ===
class Order {
    -orderId: String
    -customer: Customer
    -items: List<Item>
    -currentState: OrderState
    -shippingStrategy: ShippingStrategy
    -orderProcessor: OrderProcessor
    -orderDecorator: Order
    +addItem()
    +getItemList()
    +process()
    +cancel()
    +ship()
    +deliver()
    +setShippingStrategy(strategy: ShippingStrategy)
    +setState(state: OrderState)
    +addService(decorator: OrderDecorator)
    +calculateTotal(): double
}

Order *-- OrderState
Order *-- ShippingStrategy
Order <|-- ProcessingOrder
Order *-- OrderDecorator
Order <|-- Items
Order <|-- Customer
@enduml